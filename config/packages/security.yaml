security:
    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/users/login
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/users/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api/
            stateless: true
            custom_authenticator: App\Security\TokenAuthenticator
            provider: app_user_provider
            jwt: ~

        main:
            lazy: true
            provider: app_user_provider
            # Ten firewall może obsługiwać inne standardowe logowanie lub wymagania dotyczące sesji.
            # Jeśli wszystko jest oparte na JWT, może nie być potrzeby włączania sesji.
            # ...

    access_control:
        - { path: ^/api/users/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/users/me, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
